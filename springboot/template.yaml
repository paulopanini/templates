apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
# some metadata about the template itself
metadata:
  name: simple-springboot
  title: Spring boot application
  description: Creates a simple spring boot application
spec:
  owner: benify:core
  type: service

  # these are the steps which are rendered in the frontend with the form input
  parameters:
    - title: Fill in some steps
      required:
        - name
      properties:
        name:
          title: Name
          type: string
          description: Unique name of the component
          ui:autofocus: true
          ui:options:
            rows: 5
    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - gitlab.com

  # here's the steps that are executed in series in the scaffolder backend
  steps:
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./springboot-template
        values:
          name: ${{ parameters.name }}


    - id: fetch-flux
      name: Fetch Flux Files
      action: fetch:template
      input:
        url: ./flux-files
        values:
          name: ${{ parameters.name }}
          repoUrl: "test"

    - id: flux-registry
      name: Register project in Flux
      action: publish:gitlab:merge-request
      input:
        branchName: ${{ parameters.name }}
        title: Adding ${{parameters.name}} to the flux engine
        description: This is was done using backstage
        repoUrl: gitlab.com?repo=flux&owner=paulopanini
        targetBranchName: master
        sourcePath: ./flux-files
        targetpath: .

    
    - id: publish
      name: Publish
      action: publish:gitlab
      input:
        allowedHosts: ['gitlab.com']
        description: This is ${{ parameters.name }}
        repoUrl: ${{ parameters.repoUrl }}

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'
  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
